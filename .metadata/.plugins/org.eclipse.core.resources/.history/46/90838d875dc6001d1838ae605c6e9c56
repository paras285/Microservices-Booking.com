package com.nagarro.nagp.flightmanagement.dao;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Repository;

import com.nagarro.nagp.flightmanagement.dto.FlightDetails;
import com.nagarro.nagp.flightmanagement.dto.TravelDetails;

@Repository
public class FlightSearchDaoImpl implements FlightSearchDao {

	private List<FlightDetails> flightDetailsList = new ArrayList<>();

	public FlightSearchDaoImpl() throws ParseException {
		FlightDetails flightDetails1 = new FlightDetails("1","AIR-INDIA", "AMRITSAR", "DELHI", "ECONOMY",
				new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2023-5-28"), 5000l);
		FlightDetails flightDetails2 = new FlightDetails("2","AIR-INDIA", "AMRITSAR", "MUMBAI", "ECONOMY",
				new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2023-5-28"), 7500l);
		FlightDetails flightDetails3 = new FlightDetails("3","AIR-INDIA", "AMRITSAR", "BANGALORE", "ECONOMY",
				new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2023-5-28"), 8000l);
		FlightDetails flightDetails4 = new FlightDetails("4","AIR-INDIA", "AMRITSAR", "DELHI", "BUSINESS",
				new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2023-5-28"), 15000l);
		FlightDetails flightDetails5 = new FlightDetails("5","AIR-INDIA", "AMRITSAR", "MUMBAI", "BUSINESS",
				new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2023-5-28"), 25000l);
		flightDetailsList.add(flightDetails1);
		flightDetailsList.add(flightDetails2);
		flightDetailsList.add(flightDetails3);
		flightDetailsList.add(flightDetails4);
		flightDetailsList.add(flightDetails5);
	}

	@Override
	public List<FlightDetails> getFlightDetails(TravelDetails travelDetails) {
		return flightDetailsList.stream()
				.filter(flightDetails -> flightDetails.getDepartureLocation()
						.equals(travelDetails.getDepartureLocation()))
				.filter(flightDetails -> flightDetails.getArrivalLocation().equals(travelDetails.getArrivalLocation()))
				.filter(flightDetails -> flightDetails.getTravelDate().equals(travelDetails.getTravelDate()))
				.filter(flightDetails -> null == travelDetails.getFlightType()
						|| flightDetails.getFlightType().equals(travelDetails.getFlightType()))
				.filter(flightDetails -> null == travelDetails.getFlightName() || flightDetails.getFlightName().equals(travelDetails.getFlightName()))
				.collect(Collectors.toList());
	}

}
