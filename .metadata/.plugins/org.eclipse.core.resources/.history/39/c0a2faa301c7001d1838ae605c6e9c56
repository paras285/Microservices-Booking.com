package com.nagarro.nagp.checkoutservice.services.impl;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.nagarro.nagp.checkoutservice.configurations.BookingStatus;
import com.nagarro.nagp.checkoutservice.configurations.ServiceMapping;
import com.nagarro.nagp.checkoutservice.dto.HotelBookingDetails;
import com.nagarro.nagp.checkoutservice.dto.UserBookingEventDto;
import com.nagarro.nagp.checkoutservice.services.HotelBookingService;
import com.nagarro.nagp.checkoutservice.util.JsonSerializerUtil;

@Service
public class HotelBookingServiceImpl implements HotelBookingService {

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private JmsTemplate jmsTemplate;

	@Autowired
	private BookingStatus bookingStatus;

	private ServiceMapping serviceMapping;

	@Override
	public void confirmHotelBooking(HotelBookingDetails bookingDetails) {
		UserBookingEventDto userNotificationDto = new UserBookingEventDto();
		userNotificationDto.setOrderId(UUID.randomUUID().toString());
		userNotificationDto.setBookingStatus(bookingStatus.getBookingPending());
		userNotificationDto.setPrice(bookingDetails.getPrice());
		userNotificationDto.setOrderDetails(getHotelDetails(bookingDetails.getHotelId()));

		boolean isPaymentConfirmed = confirmPayment(bookingDetails);
		boolean isHotelConfirmed = false;
		if (isPaymentConfirmed) {
			isHotelConfirmed = confirmBooking(bookingDetails);
		} else {
			userNotificationDto.setBookingStatus(bookingStatus.getPaymentFailure());
			notifyUserAboutRejection(userNotificationDto);
			return;
		}

		if (isHotelConfirmed) {
			userNotificationDto.setBookingStatus(bookingStatus.getConfirmed());
			notifyUserAboutConfirmedBooking(userNotificationDto);

		} else {
			userNotificationDto.setBookingStatus(bookingStatus.getHotelUnavailability());
			notifyUserAboutRejection(userNotificationDto);
			startRefundProcess(userNotificationDto);
		}
	}

	private String getHotelDetails(String hotelId) {
		String url = serviceMapping.getHotelDetails() + hotelId;
		return restTemplate.getForObject(url, String.class);
	}

	private void startRefundProcess(UserBookingEventDto userNotificationDto) {
		System.out.println("Payment Refund event initiated");
		jmsTemplate.convertAndSend("startRefundEvent",JsonSerializerUtil.serialize(userNotificationDto));
	}

	private void notifyUserAboutRejection(UserBookingEventDto userNotificationDto) {
		System.out.println("Booking failure Event initiated");
		jmsTemplate.convertAndSend("notifyUserAboutRejection",JsonSerializerUtil.serialize(userNotificationDto));
	}

	private void notifyUserAboutConfirmedBooking(UserBookingEventDto userNotificationDto) {
		System.out.println("Booking Success Event initiated");
		jmsTemplate.convertAndSend("notifyUserAboutConfirmation",JsonSerializerUtil.serialize(userNotificationDto));
	}

	private boolean confirmPayment(HotelBookingDetails bookingDetails) {
		String paymentResponse = restTemplate.postForObject(serviceMapping.getConfirmPayment(), bookingDetails,
				String.class);

		System.out.println("Payment Response is :" + paymentResponse);
		if (("PAYMENT-SUCCESSFUL").equalsIgnoreCase(paymentResponse)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean confirmBooking(HotelBookingDetails bookingDetails) {
		boolean inventoryConfirmationResponse = restTemplate.postForObject(serviceMapping.getConfirmHotel(),
				bookingDetails.getHotelId(), Boolean.class);
		System.out.println("Inventory Response is: " + inventoryConfirmationResponse);
		return inventoryConfirmationResponse;
	}
}
